From dffd7ff0476caccf024e980d3077a68efa589d01 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sun, 10 Jun 2018 16:11:54 -0500
Subject: [PATCH 32/83] server, ntdll: Also store the esync type in the server.

And validate it there while we're at it.

We need to do this because CreateEvent() ignores the passed-in parameter
when opening an existing event.

Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
---
 include/wine/server_protocol.h |  4 +++-
 server/protocol.def            |  2 ++
 server/request.h               |  4 +++-
 server/trace.c                 |  2 ++
 6 files changed, 49 insertions(+), 14 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index cbfa802689..317fb9dc58 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -5663,13 +5663,15 @@ struct create_esync_request
     unsigned int access;
     int          initval;
     int          flags;
+    int          type;
     /* VARARG(objattr,object_attributes); */
+    char __pad_28[4];
 };
 struct create_esync_reply
 {
     struct reply_header __header;
     obj_handle_t handle;
-    char __pad_12[4];
+    int          type;
 };
 
 
diff --git a/server/protocol.def b/server/protocol.def
index 5880fa1f64..81035875fb 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3861,9 +3861,11 @@ struct handle_info
     unsigned int access;        /* wanted access rights */
     int          initval;       /* initial value */
     int          flags;         /* flags (EFD_SEMAPHORE or 0) */
+    int          type;          /* type of esync object (see below) */
     VARARG(objattr,object_attributes); /* object attributes */
 @REPLY
     obj_handle_t handle;        /* handle to the object */
+    int          type;          /* type of esync object (see below) */
 @END
 
 /* Retrieve the esync fd for an object. */
diff --git a/server/request.h b/server/request.h
index ca9a83632e..1295fb8304 100644
--- a/server/request.h
+++ b/server/request.h
@@ -2413,8 +2413,10 @@ C_ASSERT( sizeof(struct terminate_job_request) == 24 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, access) == 12 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, initval) == 16 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, flags) == 20 );
-C_ASSERT( sizeof(struct create_esync_request) == 24 );
+C_ASSERT( FIELD_OFFSET(struct create_esync_request, type) == 24 );
+C_ASSERT( sizeof(struct create_esync_request) == 32 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_reply, handle) == 8 );
+C_ASSERT( FIELD_OFFSET(struct create_esync_reply, type) == 12 );
 C_ASSERT( sizeof(struct create_esync_reply) == 16 );
 C_ASSERT( FIELD_OFFSET(struct get_esync_fd_request, handle) == 12 );
 C_ASSERT( sizeof(struct get_esync_fd_request) == 16 );
diff --git a/server/trace.c b/server/trace.c
index 876ca62938..0a9c8c29d5 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -4546,12 +4546,14 @@ static void dump_create_esync_request( const struct create_esync_request *req )
     fprintf( stderr, " access=%08x", req->access );
     fprintf( stderr, ", initval=%d", req->initval );
     fprintf( stderr, ", flags=%d", req->flags );
+    fprintf( stderr, ", type=%d", req->type );
     dump_varargs_object_attributes( ", objattr=", cur_size );
 }
 
 static void dump_create_esync_reply( const struct create_esync_reply *req )
 {
     fprintf( stderr, " handle=%04x", req->handle );
+    fprintf( stderr, ", type=%d", req->type );
 }
 
 static void dump_get_esync_fd_request( const struct get_esync_fd_request *req )
-- 
2.19.1

