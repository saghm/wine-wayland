From 2f794bce32133a08d35e0552c0b67b2902c5dfa9 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sun, 29 Jul 2018 16:50:08 -0500
Subject: [PATCH 78/83] ntdll, server: Initialize the shared memory portion on
 the server side.

Simply using a CS only prevents this race within one process.

Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
---
 include/wine/server_protocol.h |   4 +-
 server/protocol.def            |   1 +
 server/request.h               |   3 +-
 server/trace.c                 |   1 +
 6 files changed, 107 insertions(+), 137 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index dff6c7c960..9eac19ac33 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -5663,7 +5663,9 @@ struct create_esync_request
     unsigned int access;
     int          initval;
     int          type;
+    int          max;
     /* VARARG(objattr,object_attributes); */
+    char __pad_28[4];
 };
 struct create_esync_reply
 {
diff --git a/server/protocol.def b/server/protocol.def
index 6be50e0186..e79c5fe8fd 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3861,6 +3861,7 @@ struct handle_info
     unsigned int access;        /* wanted access rights */
     int          initval;       /* initial value */
     int          type;          /* type of esync object (see below) */
+    int          max;           /* maximum count on a semaphore */
     VARARG(objattr,object_attributes); /* object attributes */
 @REPLY
     obj_handle_t handle;        /* handle to the object */
diff --git a/server/request.h b/server/request.h
index 13b5b5f380..e470ccbb4a 100644
--- a/server/request.h
+++ b/server/request.h
@@ -2417,7 +2417,8 @@ C_ASSERT( sizeof(struct terminate_job_request) == 24 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, access) == 12 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, initval) == 16 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_request, type) == 20 );
-C_ASSERT( sizeof(struct create_esync_request) == 24 );
+C_ASSERT( FIELD_OFFSET(struct create_esync_request, max) == 24 );
+C_ASSERT( sizeof(struct create_esync_request) == 32 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_reply, handle) == 8 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_reply, type) == 12 );
 C_ASSERT( FIELD_OFFSET(struct create_esync_reply, shm_idx) == 16 );
diff --git a/server/trace.c b/server/trace.c
index f8acbb93d6..0a087666d3 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -4546,6 +4546,7 @@ static void dump_create_esync_request( const struct create_esync_request *req )
     fprintf( stderr, " access=%08x", req->access );
     fprintf( stderr, ", initval=%d", req->initval );
     fprintf( stderr, ", type=%d", req->type );
+    fprintf( stderr, ", max=%d", req->max );
     dump_varargs_object_attributes( ", objattr=", cur_size );
 }
 
-- 
2.19.1

