# Created by: varmd

depends+=(
    'lib32-glibc'
)

makedepends+=(
    'lib32-alsa-lib' 
    'lib32-expat' 
    'lib32-libffi' 
    'lib32-gcc-libs' 
    'lib32-libdrm' 
    'lib32-libelf' 
    'lib32-libjpeg-turbo'
    'lib32-libpng'
    'lib32-vulkan-icd-loader'
    'lib32-zlib'    
    'automake'               
    'unzip'               
    'cmake'               
    'meson'               
    'ninja'               
    'python-mako'
    'glslang'
    'dbus'
    'gperf'
)

pkgname+=('lib32-wine-wayland')


url_wayland="https://gitlab.freedesktop.org/wayland/wayland/-/archive/1.18.0/wayland-1.18.0.zip"
url_mpg123="https://mpg123.de/download/mpg123-1.26.3.tar.bz2"
url_openal="https://github.com/kcat/openal-soft/archive/openal-soft-1.21.0.zip"
url_mesa="https://github.com/mesa3d/mesa/archive/b7793e39ee40727f21c58b72a4b4516b8b5cc948.zip"
url_sdl2="https://github.com/spurious/SDL-mirror/archive/release-2.0.12.zip"
url_freetype2="https://download.savannah.gnu.org/releases/freetype/freetype-2.10.1.tar.xz"
url_libxml2="https://github.com/GNOME/libxml2/archive/v2.9.10.zip"
url_libsystemd32="https://github.com/systemd/systemd-stable/archive/v247.2.zip"



build_systemd_32() {
  cd "${srcdir}"
  
  

  rm -rf $(find . -maxdepth 1 -type d -name "*systemd*" | sed 1q)
  
  if [ ! -f systemd.zip ]; then
    curl -L $url_libsystemd32 > systemd.zip
  fi
  
  unzip -q systemd.zip
  
  export CC='gcc -m32'
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"
  
  cd $(find . -maxdepth 1 -type d -name "*systemd*"  | sed 1q)
  
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"  
  export CFLAGS=" -O1 -I/usr/include/libmount/ "  
  
  mkdir build
  
  sed -i "s~'crypt'~'m'~" meson.build
  sed -i "s~'cap'~'m'~" meson.build
  sed -i "s~'libcap'~'m'~" meson.build
  #sed -i "s~libmount =~libmount = libcap#'~" meson.build
  #sed -i "/2\.30/d" meson.build
  
  
  sed -i "s~crypt_r(p~NULL;//~" src/shared/libcrypt-util.c
  
  cp ../../lib32/systemd/meson.build .  
  cp ../../lib32/systemd/shared/mount-util.c src/shared/
  #cp ../../lib32/systemd/udev/meson.build src/udev/
  #cp ../../lib32/systemd/shared/meson.build src/shared/
  #echo "" > src/shared/libmount-util.h
  echo "" > src/basic/capability-util.c
  echo '#include "capability-util.h"' >> src/basic/capability-util.c
  echo "unsigned cap_last_cap(void) { return 0; }" >> src/basic/capability-util.c
  
  
  #echo "" > src/shared/mount-util.c
  #echo "" > src/shared/mount-util.h
  
  #echo "static inline int mount_nofollow_verbose(int error_log_level, const char *what, const char *where, const char *type, unsigned long flags, const char *options) { return 0; } " > src/shared/mount-util.c
  
  #echo "int umount_recursive(const char *target, int flags) { return 0; } " >> src/shared/mount-util.c
  
  #echo "include <libmount.h>" > src/shared/libmount-util.h
  #echo "static inline int libmount_parse(const char *path, FILE *source,    struct libmnt_table **ret_table, struct libmnt_iter **ret_iter) { return 1; }" >> src/shared/libmount-util.h
  
  
  local _meson_options=(
    --libexecdir	/usr/lib32
    --libdir		/usr/lib32
    -Dpam=false
    -Dtimedated=false
    -Defi=false
    -Dtpm=false
    -Dutmp=false
    -Dmemory-accounting-default=false
    -Dquotacheck=false
    -Dnss-myhostname=false
    -Dnss-systemd=false
    -Dnss-mymachines=false
    -Dnss-resolve=false
    -Dhibernate=false
    -Dcoredump=false
    -Dnetworkd=false
    -Dpstore=false
    -Drepart=false
    -Dhostnamed=false
    -Dimportd=false
    -Dportabled=false
    -Dremote=false
    -Dbacklight=false
    -Dvconsole=false
    -Dman=false
    -Dhtml=false
    -Dmicrohttpd=false
    -Dopenssl=false
    -Dlibcryptsetup=false
    -Dimportd=false
    -Dima=false
    -Dlibidn2=false
    -Dlibidn=false
    -Dlibiptc=false
    -Didn=false
    -Dp11kit=false
    -Dlz4=false
    -Dbzip2=false
    -Dlibcurl=false
    -Dmicrohttpd=false
    -Daudit=false
    -Dxkbcommon=false
    -Dtimesyncd=false
    -Dresolve=false
    -Dpolkit=false
    -Dbinfmt=false
    -Dfirstboot=false
    -Dnss-resolve=false
    -Drfkill=false
    -Dselinux=false    
    -Dglib=false
    -Ddbus=false
    -Dbashcompletiondir=no    
    -Dtests=false
    -Ddbuspolicydir=/usr/share/dbus-1/system.d
    -Ddefault-kill-user-processes=false
    -Dfallback-hostname='archlinux'
    -Drpmmacrosdir=no
    -Dsysvinit-path=
    -Dsysvrcnd-path=
    -Ddns-over-tls=false
    -Dsmack=false
    -Dgnutls=false
    -Dkernel-install=false
    -Dgcrypt=false
    -Dseccomp=false
    -Doomd=false
    -Dlocaled=false
    -Dlibfido2=false
    -Dldconfig=false
    -Delfutils=false
    -Dlz4=false
    -Dmachined=false
    -Drandomseed=false
    -Dzstd=false
    -Dxz=false
    -Dzlib=false
    -Dblkid=false
    -Dinitrd=false
    -Dgshadow=false
    -Dkmod=false
    -Dpwquality=false
    -Drepart=false
    -Dseccomp=false
    -Dima=false
    -Dkmod=false
    -Dlibcryptsetup=false
    -Dlibidn2=true
    -Dlibiptc=false
    -Dlz4=false
    -Dman=false
    -Dmanpages=false
    -Dmicrohttpd=false
    -Dnetworkd=false
    -Dpam=false
    -Dpython=false
    -Drepart=false
    -Dseccomp=false
    -Dnologin-path=/usr/bin/nologin
  )

  arch-meson . build "${_meson_options[@]}"
  
  

  meson configure build
  
  ninja -C build
  DESTDIR="$pkgdir" ninja -C build install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~\${prefix}/lib32~$pkgdir/usr/lib32~" libudev.pc
  rm -rf  $pkgdir/etc/
  rm -rf  $pkgdir/var
  rm -rf  $pkgdir/usr/lib

}


build_wayland_32() {
  cd "${srcdir}"
  
  

  rm -rf $(find . -maxdepth 1 -type d -name "*wayland-1*" | sed 1q)
  
  if [ ! -f wayland.zip ]; then
    curl -L $url_wayland > wayland.zip
  fi
  
  unzip -q wayland.zip
  
  export CC='gcc -m32'
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"
  
  cd $(find . -maxdepth 1 -type d -name "*wayland-1*"  | sed 1q)
  
  mkdir build
  
  arch-meson . build \
    --libdir=/usr/lib32 \
    -D scanner=false \
    -D documentation=false \
    -D dtd_validation=false

  meson configure build
  
  ninja -C build
  DESTDIR="$pkgdir" ninja -C build install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~\${prefix}/lib32~$pkgdir/usr/lib32~" wayland-*.pc
  
}


build_libxml2_32() {
  cd "${srcdir}"
  
  rm -rf $(find . -maxdepth 1 -type d -name "*libxml2*" | sed 1q)
  
  if [ ! -f libxml2.zip ]; then
    curl -L $url_libxml2 > libxml2.zip
  fi
  
  unzip -q libxml2.zip
  
  cd $(find . -maxdepth 1 -type d -name "*libxml2*"  | sed 1q)
  
  

  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"
  
  

  mkdir -p build

  NOCONFIGURE=1 ./autogen.sh


  cd build
  ../configure \
    --prefix=/usr \
    --libdir=/usr/lib32 \
    --without-python \
    --without-ftp \
    --without-lzma \
    --without-docbook \
    --without-readline \
    --without-debug \
    --without-icu

  sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0 /g' libtool
  CPUS=$(getconf _NPROCESSORS_ONLN)
  make -j $CPUS
  make DESTDIR="$pkgdir" install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~/usr/lib32~$pkgdir/usr/lib32~g" libxml-2.0.pc
  

}


build_mpg123_32() {
  if [ -f $pkgdir/libmpg123.so ]; then
    return 1
  fi



  cd "${srcdir}"
  
  if [ ! -f mpg123.tar.bz2 ]; then
    curl -L $url_mpg123 > mpg123.tar.bz2
    tar xjf mpg123.tar.bz2
  fi
  cd $(find . -maxdepth 1 -type d -name "*mpg123*"  | sed 1q)
  
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"

  

  ./configure --prefix=/usr --with-audio="alsa" --with-cpu=i586 --libdir=/usr/lib32
  
  CPUS=$(getconf _NPROCESSORS_ONLN)
  
  make -j $CPUS
  make -j $CPUS DESTDIR="${pkgdir}" install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~/usr/lib32~$pkgdir/usr/lib32~g" *123.pc    
}

build_openal_32() {
  if [ -f $pkgdir/libopenal.so ]; then
    return 1
  fi


  cd "${srcdir}"
  
  rm -rf $(find . -maxdepth 1 -type d -name "*openal*" | sed 1q)
  
  if [ ! -f openal.zip ]; then
    curl -L $url_openal > openal.zip
  fi
  
  unzip -q openal.zip  
  
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"

  cd $(find . -maxdepth 1 -type d -name "*openal*" | sed 1q)

  
  rm -rf build
  
  cmake -S . -B build \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=None \
    -DALSOFT_EXAMPLES=OFF \
    -DALSOFT_UTILS=OFF \
    -DCMAKE_INSTALL_LIBDIR=lib32
  cmake --build build
  DESTDIR="$pkgdir" cmake --install build
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~\${exec_prefix}/lib32~$pkgdir/usr/lib32~g" openal.pc  
}


build_mesa_32() {
  
  #if [ -d $srcdir/mesa/build ]; then
  #  cd $srcdir/mesa
  #  DESTDIR="$pkgdir" ninja -C build install
  #  return 1
  #fi


  cd "${srcdir}"

  rm -rf $(find . -maxdepth 1 -type d -name "*mesa*" | sed 1q)

  if [ ! -f mesa.zip ]; then
    curl -L $url_mesa > mesa.zip
  fi
  
  

  unzip -q mesa.zip

  mv $(find . -maxdepth 1 -type d -name "*mesa*" | sed 1q) mesa
  cd $(find . -maxdepth 1 -type d -name "*mesa*" | sed 1q)
  ls -la
  patch -Np1 < ../../lib32/mesa/disable-llvm-2.patch
  cp ../../lib32/mesa/meson.build .  
  
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"
  
  arch-meson . build \
    --libdir=/usr/lib32 \
    -D b_ndebug=true \
    -D b_lto=false \
    -D platforms=wayland,surfaceless \
    -D gallium-drivers= \
    -D dri-drivers= \
    -D vulkan-drivers=amd,intel \
    -D egl=false \
    -D opengl=false \
    -D vulkan-overlay-layer=true \
    -D gbm=false \
    -D gles1=false \
    -D gles2=false \
    -D gles3=false \
    -D glvnd=false \
    -D glx=disabled \
    -D libunwind=false \
    -D llvm=false \
    -D lmsensors=false \
    -D osmesa=none \
    -D shared-glapi=false \
    -D zstd=false \
    -D valgrind=false 

  # Print config
  meson configure build
  
  ninja -C build
  DESTDIR="$pkgdir" ninja -C build install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~/usr/lib32~$pkgdir/usr/lib32~g" *.pc  
}


build_sdl2_32() {
  cd "${srcdir}"

  rm -rf $(find . -maxdepth 1 -type d -name "*SDL*" | sed 1q)

  if [ ! -f sdl2.zip ]; then
    curl -L $url_sdl2 > sdl2.zip
  fi
  
  

  unzip -q sdl2.zip
  

  cd $(find . -maxdepth 1 -type d -name "*SDL*" | sed 1q)
  
  patch -Np1 < ../../lib32/sdl2/remove-dbus.patch
  patch -Np1 < ../../lib32/sdl2/remove-ibus.patch
  mkdir -p build
  cd build
  
  export CC='gcc -m32'
  export CXX='g++ -m32'
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:$pkgdir/usr/lib32/pkgconfig"
  
  cmake .. \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DLIB_SUFFIX=32 \
      -DSDL_STATIC=OFF \
      -DSDL_DLOPEN=ON \
      -DSDL_USE_LIBDBUS=OFF \
      -DARTS=OFF \
      -DESD=OFF \
      -DNAS=OFF \
      -DALSA=ON \
      -DJACK=OFF \
      -DDBUS=OFF \
      -DHAPTIC=ON \
      -DJOYSTICK=ON \
      -DJOYSTICK_HIDAPI=ON \
      -DPULSEAUDIO=OFF \
      -DPULSEAUDIO_SHARED=OFF \
      -DVIDEO=OFF \
      -DRPATH=OFF \
      -DCLOCK_GETTIME=ON
      
  CPUS=$(getconf _NPROCESSORS_ONLN)
  
  make -j $CPUS
  make DESTDIR="${pkgdir}" install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~\${exec_prefix}/lib32~$pkgdir/usr/lib32~g" sdl2.pc  
}


build_freetype2_32() {
  cd "${srcdir}"

  rm -rf $(find . -maxdepth 1 -type d -name "*freetype-*" | sed 1q)

  if [ ! -f freetype2.tar.xz ]; then
    curl -L $url_freetype2 > freetype2.tar.xz
  fi
  
  

  tar xf freetype2.tar.xz
  

  cd $(find . -maxdepth 1 -type d -name "*freetype-*" | sed 1q)
  
  
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig/"

  ./configure --prefix=/usr --without-png --without-bzip2 --without-harfbuzz --disable-static --libdir=/usr/lib32
      
  CPUS=$(getconf _NPROCESSORS_ONLN)
  
  make -j $CPUS
  make DESTDIR="${pkgdir}" install
  
  cd $pkgdir/usr/lib32/pkgconfig
  sed -i "s~/usr/lib32~$pkgdir/usr/lib32~g" freetype2.pc
}

build_32() {
  cd "${srcdir}"
  
  mkdir -p $pkgdir/usr/lib32
  cp /usr/lib32/lib* $pkgdir/usr/lib32



  #32 bit build fails without these
  export CFLAGS="${CFLAGS/-fno-plt/}"
  export LDFLAGS="${LDFLAGS/,-z,now/}"
  export LDFLAGS="-L$pkgdir/usr/lib32 $LDFLAGS"
  
  export PKG_CONFIG_PATH="$pkgdir/usr/lib32/pkgconfig:/usr/lib32/pkgconfig"
  
  
  export LD_LIBRARY_PATH="/usr/lib32:$pkgdir/usr/lib32:$LD_LIBRARY_PATH"
  

  # create new build dirs
	mkdir -p "${srcdir}"/wine-wayland-32-build

  msg2 'Building Wine-32...'
	cd  "${srcdir}"/wine-wayland-32-build
	
  
  
  
  if [ -e Makefile ]; then 
    echo "Already configured"
  else
  ../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir=/usr/lib32 \
    --with-wine64="$srcdir/wine-wayland-64-build" \
		--without-x \
    --without-gsm \
    --without-opengl \
    --without-pcap \
    --without-cups \
    --without-cms \
    --without-vkd3d \
    --without-xinerama \
    --without-xrandr \
    --without-dbus \
    --without-sane \
    --without-osmesa \
    --without-gettext \
    --without-fontconfig \
    --without-cups \
    --disable-win16 \
    --without-gphoto \
    --without-xcomposite \
    --without-xcursor \
    --without-hal \
    --without-xfixes \
    --without-xshape \
    --without-xrender \
    --without-xinput \
    --without-xinput2 \
    --without-xrender \
    --without-xxf86vm \
    --without-xshm \
    --without-usb \
    --with-freetype \
    --with-vulkan \
    --with-sdl \
    --with-mpg123 \
    --with-openal \
    --without-faudio \
    --without-netapi \
    --without-ldap \
		--disable-tests
  fi
	
  CPUS=$(getconf _NPROCESSORS_ONLN)
  
	make -s -j $CPUS
  
  
  
}

package_lib32-wine-wayland() {

  
  provides=('lib32-wine')
  
  build_systemd_32
  build_wayland_32
  build_sdl2_32
  build_libxml2_32
  build_mpg123_32
  build_openal_32
  build_mesa_32
  
  build_freetype2_32
  build_32
  
  mkdir -p $pkgdir/usr/lib/wineland/
  mkdir -p $pkgdir/usr/lib/wineland/vulkan/icd.d
  
  cp $pkgdir/usr/share/vulkan/icd.d/*i686* $pkgdir/usr/lib/wineland/vulkan/icd.d/
  
  rm -rf $pkgdir/usr/share
  rm -rf $pkgdir/usr/include
  rm -rf $pkgdir/usr/bin
  
  rm -rf  $pkgdir/usr/lib32/pkgconfig
  rm -rf  $pkgdir/usr/lib32/cmake
  rm -rf  $pkgdir/usr/lib32/*.a
  rm -rf  $pkgdir/usr/lib32/libasan*
  rm -rf  $pkgdir/usr/lib32/libicu*
  rm -rf  $pkgdir/usr/lib32/libubsan*
  rm -rf  $pkgdir/usr/lib32/libgo*
  rm -rf  $pkgdir/usr/lib32/libgphobos*
  rm -rf  $pkgdir/usr/lib32/libgdruntime*
  rm -rf  $pkgdir/usr/lib32/libgfortran*
  rm -rf  $pkgdir/usr/lib32/libfortran*
  rm -rf  $pkgdir/usr/lib32/libxcb*
  rm -rf  $pkgdir/usr/lib32/libX*
  rm -rf  $pkgdir/etc/
  rm -rf  $pkgdir/var/
  
  mkdir -p $pkgdir/usr/lib/wineland
  mv $pkgdir/usr/lib32 $pkgdir/usr/lib/wineland/lib32
  
  cd $pkgdir/usr/lib/wineland/vulkan/icd.d
  sed -i "s~/usr/lib32~/usr/lib/wineland/lib32~g" *
  
  cd "${srcdir}"/wine-wayland-32-build
	make -s	prefix="${pkgdir}/usr" \
    libdir="${pkgdir}/usr/lib32" \
	  dlldir="${pkgdir}/usr/lib32/wine" install

}
