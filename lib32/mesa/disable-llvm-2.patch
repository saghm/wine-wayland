diff --git a/src/amd/compiler/aco_interface.cpp b/src/amd/compiler/aco_interface.cpp
index 8f2593c..75e1174 100644
--- a/src/amd/compiler/aco_interface.cpp
+++ b/src/amd/compiler/aco_interface.cpp
@@ -179,7 +179,7 @@ void aco_compile_shader(unsigned shader_count,
       size_t disasm_size = 0;
       FILE *f = open_memstream(&data, &disasm_size);
       if (f) {
-         bool fail = aco::print_asm(program.get(), code, exec_size / 4u, f);
+         bool fail = 1;
          fputc(0, f);
          fclose(f);
 
diff --git a/src/amd/compiler/aco_print_asm.cpp b/src/amd/compiler/aco_print_asm.cpp
index af12314..af71254 100644
--- a/src/amd/compiler/aco_print_asm.cpp
+++ b/src/amd/compiler/aco_print_asm.cpp
@@ -1,249 +1,10 @@
 #include <array>
 #include <iomanip>
 #include "aco_ir.h"
-#include "llvm-c/Disassembler.h"
-#include "ac_llvm_util.h"
 
-#include <llvm/ADT/StringRef.h>
-#if LLVM_VERSION_MAJOR >= 11
-#include <llvm/MC/MCDisassembler/MCDisassembler.h>
-#endif
 
-namespace aco {
-namespace {
-
-/* LLVM disassembler only supports GFX8+, try to disassemble with CLRXdisasm
- * for GFX6-GFX7 if found on the system, this is better than nothing.
-*/
-bool print_asm_gfx6_gfx7(Program *program, std::vector<uint32_t>& binary,
-                         FILE *output)
-{
-   char path[] = "/tmp/fileXXXXXX";
-   char line[2048], command[128];
-   const char *gpu_type;
-   FILE *p;
-   int fd;
-
-   /* Dump the binary into a temporary file. */
-   fd = mkstemp(path);
-   if (fd < 0)
-      return true;
-
-   for (uint32_t w : binary)
-   {
-      if (write(fd, &w, sizeof(w)) == -1)
-         goto fail;
-   }
-
-   /* Determine the GPU type for CLRXdisasm. Use the family for GFX6 chips
-    * because it doesn't allow to use gfx600 directly.
-    */
-   switch (program->chip_class) {
-   case GFX6:
-      switch (program->family) {
-      case CHIP_TAHITI:
-         gpu_type = "tahiti";
-         break;
-      case CHIP_PITCAIRN:
-         gpu_type = "pitcairn";
-         break;
-      case CHIP_VERDE:
-         gpu_type = "capeverde";
-         break;
-      case CHIP_OLAND:
-         gpu_type = "oland";
-         break;
-      case CHIP_HAINAN:
-         gpu_type = "hainan";
-         break;
-      default:
-         unreachable("Invalid GFX6 family!");
-      }
-      break;
-   case GFX7:
-      gpu_type = "gfx700";
-      break;
-   default:
-      unreachable("Invalid chip class!");
-   }
-
-   sprintf(command, "clrxdisasm --gpuType=%s -r %s", gpu_type, path);
-
-   p = popen(command, "r");
-   if (p) {
-      if (!fgets(line, sizeof(line), p)) {
-         fprintf(output, "clrxdisasm not found\n");
-         pclose(p);
-         goto fail;
-      }
-
-      do {
-         fputs(line, output);
-      } while (fgets(line, sizeof(line), p));
-
-      pclose(p);
-   }
-
-   return false;
-
-fail:
-   close(fd);
-   unlink(path);
-   return true;
-}
-
-std::pair<bool, size_t> disasm_instr(chip_class chip, LLVMDisasmContextRef disasm,
-                                     uint32_t *binary, unsigned exec_size, size_t pos,
-                                     char *outline, unsigned outline_size)
+void print_asm()
 {
-   /* mask out src2 on v_writelane_b32 */
-   if (((chip == GFX8 || chip == GFX9) && (binary[pos] & 0xffff8000) == 0xd28a0000) ||
-       (chip >= GFX10 && (binary[pos] & 0xffff8000) == 0xd7610000)) {
-      binary[pos+1] = binary[pos+1] & 0xF803FFFF;
-   }
-
-   size_t l = LLVMDisasmInstruction(disasm, (uint8_t *) &binary[pos],
-                                    (exec_size - pos) * sizeof(uint32_t), pos * 4,
-                                    outline, outline_size);
-
-   if (chip >= GFX10 && l == 8 &&
-       ((binary[pos] & 0xffff0000) == 0xd7610000) &&
-       ((binary[pos + 1] & 0x1ff) == 0xff)) {
-      /* v_writelane with literal uses 3 dwords but llvm consumes only 2 */
-      l += 4;
-   }
-
-   bool invalid = false;
-   size_t size;
-   if (!l &&
-       ((chip >= GFX9 && (binary[pos] & 0xffff8000) == 0xd1348000) || /* v_add_u32_e64 + clamp */
-        (chip >= GFX10 && (binary[pos] & 0xffff8000) == 0xd7038000) || /* v_add_u16_e64 + clamp */
-        (chip <= GFX9 && (binary[pos] & 0xffff8000) == 0xd1268000) || /* v_add_u16_e64 + clamp */
-        (chip >= GFX10 && (binary[pos] & 0xffff8000) == 0xd76d8000) || /* v_add3_u32 + clamp */
-        (chip == GFX9 && (binary[pos] & 0xffff8000) == 0xd1ff8000)) /* v_add3_u32 + clamp */) {
-      strcpy(outline, "\tinteger addition + clamp");
-      bool has_literal = chip >= GFX10 &&
-                         (((binary[pos+1] & 0x1ff) == 0xff) || (((binary[pos+1] >> 9) & 0x1ff) == 0xff));
-      size = 2 + has_literal;
-   } else if (chip >= GFX10 && l == 4 && ((binary[pos] & 0xfe0001ff) == 0x020000f9)) {
-      strcpy(outline, "\tv_cndmask_b32 + sdwa");
-      size = 2;
-   } else if (!l) {
-      strcpy(outline, "(invalid instruction)");
-      size = 1;
-      invalid = true;
-   } else {
-      assert(l % 4 == 0);
-      size = l / 4;
-   }
-
-   return std::make_pair(invalid, size);
-}
-} /* end namespace */
-
-bool print_asm(Program *program, std::vector<uint32_t>& binary,
-               unsigned exec_size, FILE *output)
-{
-   if (program->chip_class <= GFX7) {
-      /* Do not abort if clrxdisasm isn't found. */
-      print_asm_gfx6_gfx7(program, binary, output);
-      return false;
-   }
-
-   std::vector<bool> referenced_blocks(program->blocks.size());
-   referenced_blocks[0] = true;
-   for (Block& block : program->blocks) {
-      for (unsigned succ : block.linear_succs)
-         referenced_blocks[succ] = true;
-   }
-
-   #if LLVM_VERSION_MAJOR >= 11
-   std::vector<llvm::SymbolInfoTy> symbols;
-   #else
-   std::vector<std::tuple<uint64_t, llvm::StringRef, uint8_t>> symbols;
-   #endif
-   std::vector<std::array<char,16>> block_names;
-   block_names.reserve(program->blocks.size());
-   for (Block& block : program->blocks) {
-      if (!referenced_blocks[block.index])
-         continue;
-      std::array<char, 16> name;
-      sprintf(name.data(), "BB%u", block.index);
-      block_names.push_back(name);
-      symbols.emplace_back(block.offset * 4, llvm::StringRef(block_names[block_names.size() - 1].data()), 0);
-   }
-
-   const char *features = "";
-   if (program->chip_class >= GFX10 && program->wave_size == 64) {
-      features = "+wavefrontsize64";
-   }
-
-   LLVMDisasmContextRef disasm = LLVMCreateDisasmCPUFeatures("amdgcn-mesa-mesa3d",
-                                                             ac_get_llvm_processor_name(program->family),
-                                                             features,
-                                                             &symbols, 0, NULL, NULL);
-
-   size_t pos = 0;
-   bool invalid = false;
-   unsigned next_block = 0;
-
-   unsigned prev_size = 0;
-   unsigned prev_pos = 0;
-   unsigned repeat_count = 0;
-   while (pos < exec_size) {
-      bool new_block = next_block < program->blocks.size() && pos == program->blocks[next_block].offset;
-      if (pos + prev_size <= exec_size && prev_pos != pos && !new_block &&
-          memcmp(&binary[prev_pos], &binary[pos], prev_size * 4) == 0) {
-         repeat_count++;
-         pos += prev_size;
-         continue;
-      } else {
-         if (repeat_count)
-            fprintf(output, "\t(then repeated %u times)\n", repeat_count);
-         repeat_count = 0;
-      }
-
-      while (next_block < program->blocks.size() && pos == program->blocks[next_block].offset) {
-         if (referenced_blocks[next_block])
-            fprintf(output, "BB%u:\n", next_block);
-         next_block++;
-      }
-
-      char outline[1024];
-      std::pair<bool, size_t> res = disasm_instr(
-         program->chip_class, disasm, binary.data(), exec_size, pos, outline, sizeof(outline));
-      invalid |= res.first;
-
-      fprintf(output, "%-60s ;", outline);
-
-      for (unsigned i = 0; i < res.second; i++)
-         fprintf(output, " %.8x", binary[pos + i]);
-      fputc('\n', output);
-
-      prev_size = res.second;
-      prev_pos = pos;
-      pos += res.second;
-   }
-   assert(next_block == program->blocks.size());
-
-   LLVMDisasmDispose(disasm);
-
-   if (program->constant_data.size()) {
-      fputs("\n/* constant data */\n", output);
-      for (unsigned i = 0; i < program->constant_data.size(); i += 32) {
-         fprintf(output, "[%.6u]", i);
-         unsigned line_size = std::min<size_t>(program->constant_data.size() - i, 32);
-         for (unsigned j = 0; j < line_size; j += 4) {
-            unsigned size = std::min<size_t>(program->constant_data.size() - (i + j), 4);
-            uint32_t v = 0;
-            memcpy(&v, &program->constant_data[i + j], size);
-            fprintf(output, " %.8x", v);
-         }
-         fputc('\n', output);
-      }
-   }
-
-   return invalid;
-}
+   
 
 }
diff --git a/src/amd/meson.build b/src/amd/meson.build
index 4a27c8c..4c68f3f 100644
--- a/src/amd/meson.build
+++ b/src/amd/meson.build
@@ -22,7 +22,7 @@ inc_amd = include_directories('.')
 
 subdir('addrlib')
 subdir('common')
-subdir('llvm')
+#subdir('llvm')
 if with_amd_vk
   subdir('compiler')
   subdir('vulkan')
diff --git a/src/amd/vulkan/meson.build b/src/amd/vulkan/meson.build
index d155779..b9bdf22 100644
--- a/src/amd/vulkan/meson.build
+++ b/src/amd/vulkan/meson.build
@@ -91,7 +91,6 @@ libradv_files = files(
   'radv_meta_resolve_cs.c',
   'radv_meta_resolve_fs.c',
   'radv_nir_lower_ycbcr_textures.c',
-  'radv_nir_to_llvm.c',
   'radv_pass.c',
   'radv_pipeline.c',
   'radv_pipeline_cache.c',
@@ -162,13 +161,14 @@ libvulkan_radeon = shared_library(
   'vulkan_radeon',
   [libradv_files, radv_entrypoints, radv_extensions_c, amd_vk_format_table_c, sha1_h],
   include_directories : [
-    inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux, inc_amd, inc_amd_common, inc_amd_common_llvm, inc_compiler, inc_util, inc_vulkan_wsi,
+    inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux, inc_amd, inc_amd_common, inc_compiler, inc_util, inc_vulkan_wsi,
   ],
   link_with : [
-    libamd_common, libamd_common_llvm, libamdgpu_addrlib, libvulkan_wsi,
+    #libamd_common, libamd_common_llvm, libamdgpu_addrlib, libvulkan_wsi,
+    libamd_common, libamdgpu_addrlib, libvulkan_wsi,
   ],
   dependencies : [
-    dep_llvm, dep_libdrm_amdgpu, dep_thread, dep_elf, dep_dl, dep_m,
+    dep_libdrm_amdgpu, dep_thread, dep_elf, dep_dl, dep_m,
     dep_valgrind, radv_deps, idep_aco,
     idep_mesautil, idep_nir, idep_vulkan_util, idep_amdgfxregs_h, idep_xmlconfig,
   ],
diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index 42cb023..f8b45e0 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -44,7 +44,7 @@
 #include "drm-uapi/amdgpu_drm.h"
 #include "winsys/amdgpu/radv_amdgpu_winsys_public.h"
 #include "winsys/null/radv_null_winsys_public.h"
-#include "ac_llvm_util.h"
+
 #include "vk_format.h"
 #include "sid.h"
 #include "git_sha1.h"
@@ -115,8 +115,7 @@ radv_device_get_cache_uuid(enum radeon_family family, void *uuid)
 	memset(uuid, 0, VK_UUID_SIZE);
 	_mesa_sha1_init(&ctx);
 
-	if (!disk_cache_get_function_identifier(radv_device_get_cache_uuid, &ctx) ||
-	    !disk_cache_get_function_identifier(LLVMInitializeAMDGPUTargetInfo, &ctx))
+	if (!disk_cache_get_function_identifier(radv_device_get_cache_uuid, &ctx) )
 		return -1;
 
 	_mesa_sha1_update(&ctx, &family, sizeof(family));
@@ -269,13 +268,13 @@ radv_get_compiler_string(struct radv_physical_device *pdevice)
 		 */
 		if (driQueryOptionb(&pdevice->instance->dri_options,
 				    "radv_report_llvm9_version_string")) {
-			return "ACO/LLVM 9.0.1";
+			return "ACO";
 		}
 
 		return "ACO";
 	}
 
-	return "LLVM " MESA_LLVM_VERSION_STRING;
+	return " ACO ";
 }
 
 static VkResult
@@ -1004,7 +1003,7 @@ radv_get_physical_device_features_1_1(struct radv_physical_device *pdevice,
 	f->storageBuffer16BitAccess            = true;
 	f->uniformAndStorageBuffer16BitAccess  = true;
 	f->storagePushConstant16               = true;
-	f->storageInputOutput16                = pdevice->rad_info.has_packed_math_16bit && (LLVM_VERSION_MAJOR >= 9 || !pdevice->use_llvm);
+	f->storageInputOutput16                = pdevice->rad_info.has_packed_math_16bit && (!pdevice->use_llvm);
 	f->multiview                           = true;
 	f->multiviewGeometryShader             = true;
 	f->multiviewTessellationShader         = true;
@@ -1026,8 +1025,8 @@ radv_get_physical_device_features_1_2(struct radv_physical_device *pdevice,
 	f->storageBuffer8BitAccess = true;
 	f->uniformAndStorageBuffer8BitAccess = true;
 	f->storagePushConstant8 = true;
-	f->shaderBufferInt64Atomics = LLVM_VERSION_MAJOR >= 9 || !pdevice->use_llvm;
-	f->shaderSharedInt64Atomics = LLVM_VERSION_MAJOR >= 9 || !pdevice->use_llvm;
+	f->shaderBufferInt64Atomics = !pdevice->use_llvm;
+	f->shaderSharedInt64Atomics = !pdevice->use_llvm;
 	f->shaderFloat16 = pdevice->rad_info.has_packed_math_16bit;
 	f->shaderInt8 = true;
 
@@ -1245,7 +1244,7 @@ void radv_GetPhysicalDeviceFeatures2(
 		case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: {
 			VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *features =
 				(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *)ext;
-			features->shaderDemoteToHelperInvocation = LLVM_VERSION_MAJOR >= 9 || !pdevice->use_llvm;
+			features->shaderDemoteToHelperInvocation = !pdevice->use_llvm;
 			break;
 		}
 		case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: {
@@ -1418,7 +1417,7 @@ void radv_GetPhysicalDeviceFeatures2(
 			features->shaderBufferFloat64AtomicAdd = false;
 			features->shaderSharedFloat32Atomics = true;
 			features->shaderSharedFloat32AtomicAdd = pdevice->rad_info.chip_class >= GFX8 &&
-								 (!pdevice->use_llvm || LLVM_VERSION_MAJOR >= 10);
+								 (!pdevice->use_llvm);
 			features->shaderSharedFloat64Atomics = true;
 			features->shaderSharedFloat64AtomicAdd = false;
 			features->shaderImageFloat32Atomics = true;
diff --git a/src/amd/vulkan/radv_extensions.py b/src/amd/vulkan/radv_extensions.py
index e544cf2..2369cd5 100644
--- a/src/amd/vulkan/radv_extensions.py
+++ b/src/amd/vulkan/radv_extensions.py
@@ -94,7 +94,7 @@ EXTENSIONS = [
     Extension('VK_KHR_sampler_mirror_clamp_to_edge',      3, True),
     Extension('VK_KHR_sampler_ycbcr_conversion',         14, True),
     Extension('VK_KHR_separate_depth_stencil_layouts',    1, True),
-    Extension('VK_KHR_shader_atomic_int64',               1, 'LLVM_VERSION_MAJOR >= 9 || !device->use_llvm'),
+    Extension('VK_KHR_shader_atomic_int64',               1, True),
     Extension('VK_KHR_shader_clock',                      1, True),
     Extension('VK_KHR_shader_draw_parameters',            1, True),
     Extension('VK_KHR_shader_float_controls',             4, True),
@@ -156,7 +156,7 @@ EXTENSIONS = [
     Extension('VK_EXT_sampler_filter_minmax',             2, True),
     Extension('VK_EXT_scalar_block_layout',               1, 'device->rad_info.chip_class >= GFX7'),
     Extension('VK_EXT_shader_atomic_float',               1, True),
-    Extension('VK_EXT_shader_demote_to_helper_invocation',1, 'LLVM_VERSION_MAJOR >= 9 || !device->use_llvm'),
+    Extension('VK_EXT_shader_demote_to_helper_invocation',1, True),
     Extension('VK_EXT_shader_viewport_index_layer',       1, True),
     Extension('VK_EXT_shader_stencil_export',             1, True),
     Extension('VK_EXT_shader_subgroup_ballot',            1, True),
diff --git a/src/amd/vulkan/radv_llvm_helper.cpp b/src/amd/vulkan/radv_llvm_helper.cpp
index 612548e..3e86652 100644
--- a/src/amd/vulkan/radv_llvm_helper.cpp
+++ b/src/amd/vulkan/radv_llvm_helper.cpp
@@ -20,131 +20,6 @@
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  * IN THE SOFTWARE.
  */
-#include "ac_llvm_util.h"
-#include "ac_llvm_build.h"
 #include "radv_shader_helper.h"
 
 #include <list>
-class radv_llvm_per_thread_info {
-public:
-	radv_llvm_per_thread_info(enum radeon_family arg_family,
-				enum ac_target_machine_options arg_tm_options,
-				unsigned arg_wave_size)
-		: family(arg_family), tm_options(arg_tm_options),
-		  wave_size(arg_wave_size), passes(NULL), passes_wave32(NULL) {}
-
-	~radv_llvm_per_thread_info()
-	{
-		ac_destroy_llvm_compiler(&llvm_info);
-	}
-
-	bool init(void)
-	{
-		if (!ac_init_llvm_compiler(&llvm_info,
-					  family,
-					  tm_options))
-			return false;
-
-		passes = ac_create_llvm_passes(llvm_info.tm);
-		if (!passes)
-			return false;
-
-		if (llvm_info.tm_wave32) {
-			passes_wave32 = ac_create_llvm_passes(llvm_info.tm_wave32);
-			if (!passes_wave32)
-				return false;
-		}
-
-		return true;
-	}
-
-	bool compile_to_memory_buffer(LLVMModuleRef module,
-				      char **pelf_buffer, size_t *pelf_size)
-	{
-		struct ac_compiler_passes *p = wave_size == 32 ? passes_wave32 : passes;
-		return ac_compile_module_to_elf(p, module, pelf_buffer, pelf_size);
-	}
-
-	bool is_same(enum radeon_family arg_family,
-		     enum ac_target_machine_options arg_tm_options,
-		     unsigned arg_wave_size) {
-		if (arg_family == family &&
-		    arg_tm_options == tm_options &&
-		    arg_wave_size == wave_size)
-			return true;
-		return false;
-	}
-	struct ac_llvm_compiler llvm_info;
-private:
-	enum radeon_family family;
-	enum ac_target_machine_options tm_options;
-	unsigned wave_size;
-	struct ac_compiler_passes *passes;
-	struct ac_compiler_passes *passes_wave32;
-};
-
-/* we have to store a linked list per thread due to the possiblity of multiple gpus being required */
-static thread_local std::list<radv_llvm_per_thread_info> radv_llvm_per_thread_list;
-
-bool radv_compile_to_elf(struct ac_llvm_compiler *info,
-			LLVMModuleRef module,
-			char **pelf_buffer, size_t *pelf_size)
-{
-	radv_llvm_per_thread_info *thread_info = nullptr;
-
-	for (auto &I : radv_llvm_per_thread_list) {
-		if (I.llvm_info.tm == info->tm) {
-			thread_info = &I;
-			break;
-		}
-	}
-
-	if (!thread_info) {
-		struct ac_compiler_passes *passes = ac_create_llvm_passes(info->tm);
-		bool ret = ac_compile_module_to_elf(passes, module, pelf_buffer, pelf_size);
-		ac_destroy_llvm_passes(passes);
-		return ret;
-	}
-
-	return thread_info->compile_to_memory_buffer(module, pelf_buffer, pelf_size);
-}
-
-bool radv_init_llvm_compiler(struct ac_llvm_compiler *info,
-			     bool thread_compiler,
-			     enum radeon_family family,
-			     enum ac_target_machine_options tm_options,
-			     unsigned wave_size)
-{
-	if (thread_compiler) {
-		for (auto &I : radv_llvm_per_thread_list) {
-			if (I.is_same(family, tm_options, wave_size)) {
-				*info = I.llvm_info;
-				return true;
-			}
-		}
-
-		radv_llvm_per_thread_list.emplace_back(family, tm_options, wave_size);
-		radv_llvm_per_thread_info &tinfo = radv_llvm_per_thread_list.back();
-
-		if (!tinfo.init()) {
-			radv_llvm_per_thread_list.pop_back();
-			return false;
-		}
-
-		*info = tinfo.llvm_info;
-		return true;
-	}
-
-	if (!ac_init_llvm_compiler(info,
-				   family,
-				   tm_options))
-		return false;
-	return true;
-}
-
-void radv_destroy_llvm_compiler(struct ac_llvm_compiler *info,
-				bool thread_compiler)
-{
-	if (!thread_compiler)
-		ac_destroy_llvm_compiler(info);
-}
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index c917b11..49d79fb 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -40,13 +40,16 @@
 
 #include "sid.h"
 #include "ac_binary.h"
-#include "ac_llvm_util.h"
-#include "ac_nir_to_llvm.h"
+
+
 #include "vk_format.h"
 #include "util/debug.h"
 #include "ac_exp_param.h"
 #include "ac_shader_util.h"
 
+struct nir_shader;
+struct nir_variable;
+
 struct radv_blend_state {
 	uint32_t blend_enable_4bit;
 	uint32_t need_src_alpha;
@@ -2299,16 +2302,13 @@ radv_link_shaders(struct radv_pipeline *pipeline, nir_shader **shaders,
 
 		if (progress) {
 			if (nir_lower_global_vars_to_local(ordered_shaders[i])) {
-				ac_lower_indirect_derefs(ordered_shaders[i],
-				                         pipeline->device->physical_device->rad_info.chip_class);
 				/* remove dead writes, which can remove input loads */
 				nir_lower_vars_to_ssa(ordered_shaders[i]);
 				nir_opt_dce(ordered_shaders[i]);
 			}
 
 			if (nir_lower_global_vars_to_local(ordered_shaders[i - 1])) {
-				ac_lower_indirect_derefs(ordered_shaders[i - 1],
-				                         pipeline->device->physical_device->rad_info.chip_class);
+
 			}
 		}
 	}
diff --git a/src/amd/vulkan/radv_pipeline_cache.c b/src/amd/vulkan/radv_pipeline_cache.c
index d031129..b40e49a 100644
--- a/src/amd/vulkan/radv_pipeline_cache.c
+++ b/src/amd/vulkan/radv_pipeline_cache.c
@@ -31,7 +31,7 @@
 #include "radv_shader.h"
 #include "vulkan/util/vk_util.h"
 
-#include "ac_nir_to_llvm.h"
+
 
 struct cache_entry {
 	union {
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 298ae08..0a71f10 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -56,11 +56,12 @@
 
 #include "radv_radeon_winsys.h"
 #include "ac_binary.h"
-#include "ac_nir_to_llvm.h"
+
 #include "ac_gpu_info.h"
 #include "ac_surface.h"
-#include "ac_llvm_build.h"
-#include "ac_llvm_util.h"
+#include "ac_shader_util.h"
+
+
 #include "radv_constants.h"
 #include "radv_descriptor_set.h"
 #include "radv_extensions.h"
@@ -2670,7 +2671,7 @@ static inline uint32_t si_translate_stencil_op(enum VkStencilOp op)
 static inline bool
 radv_use_llvm_for_stage(struct radv_device *device, UNUSED gl_shader_stage stage)
 {
-	return device->physical_device->use_llvm;
+	return false;
 }
 
 #define RADV_DEFINE_HANDLE_CASTS(__radv_type, __VkType)		\
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 7804cd1..3a6794d 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -36,11 +36,14 @@
 #include "nir/nir.h"
 #include "nir/nir_builder.h"
 #include "spirv/nir_spirv.h"
+#include "amd_family.h"
+#include "compiler/shader_enums.h"
 
 #include "sid.h"
 #include "ac_binary.h"
-#include "ac_llvm_util.h"
-#include "ac_nir_to_llvm.h"
+#include "ac_shader_util.h"
+
+
 #include "ac_rtld.h"
 #include "vk_format.h"
 #include "util/debug.h"
@@ -648,17 +651,7 @@ radv_shader_compile_to_nir(struct radv_device *device,
 	NIR_PASS_V(nir, nir_opt_large_constants,
 		   glsl_get_natural_size_align_bytes, 16);
 
-	/* Indirect lowering must be called after the radv_optimize_nir() loop
-	 * has been called at least once. Otherwise indirect lowering can
-	 * bloat the instruction count of the loop and cause it to be
-	 * considered too large for unrolling.
-	 */
-	if (ac_lower_indirect_derefs(nir, device->physical_device->rad_info.chip_class) &&
-	    !(flags & VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT) &&
-	    nir->info.stage != MESA_SHADER_COMPUTE) {
-		/* Optimize the lowered code before the linking optimizations. */
-		radv_optimize_nir(nir, false, false);
-	}
+
 
 	return nir;
 }
@@ -1295,12 +1288,12 @@ shader_variant_compile(struct radv_device *device,
 				 shader_count >= 2 ? shaders[shader_count - 2]->info.stage
 						   : MESA_SHADER_VERTEX);
 
-	if (radv_use_llvm_for_stage(device, stage) ||
-	    options->dump_shader || options->record_ir)
-		ac_init_llvm_once();
+//	if (radv_use_llvm_for_stage(device, stage) ||
+//	    options->dump_shader || options->record_ir)
+//		ac_init_llvm_once();
 
 	if (radv_use_llvm_for_stage(device, stage)) {
-		llvm_compile_shader(device, shader_count, shaders, &binary, &args);
+		int d = 1;
 	} else {
 		aco_compile_shader(shader_count, shaders, &binary, &args);
 	}
diff --git a/src/amd/vulkan/radv_shader_helper.h b/src/amd/vulkan/radv_shader_helper.h
index c64d2df..348b579 100644
--- a/src/amd/vulkan/radv_shader_helper.h
+++ b/src/amd/vulkan/radv_shader_helper.h
@@ -26,17 +26,6 @@
 extern "C" {
 #endif
 
-bool radv_init_llvm_compiler(struct ac_llvm_compiler *info,
-			     bool thread_compiler,
-			     enum radeon_family family,
-			     enum ac_target_machine_options tm_options,
-			     unsigned wave_size);
-void radv_destroy_llvm_compiler(struct ac_llvm_compiler *info,
-				bool thread_compiler);
-
-bool radv_compile_to_elf(struct ac_llvm_compiler *info,
-			 LLVMModuleRef module,
-			 char **pelf_buffer, size_t *pelf_size);
 
 #ifdef __cplusplus
 }
diff --git a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.c b/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.c
index c1a738a..19558a6 100644
--- a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.c
+++ b/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.c
@@ -46,13 +46,13 @@ do_winsys_init(struct radv_amdgpu_winsys *ws, int fd)
 		return false;
 
 	/* LLVM 11 is required for GFX10.3. */
-	if (ws->info.chip_class == GFX10_3 && ws->use_llvm && LLVM_VERSION_MAJOR < 11) {
+	if (ws->info.chip_class == GFX10_3 && ws->use_llvm) {
 		fprintf(stderr, "radv: GFX 10.3 requires LLVM 11 or higher\n");
 		return false;
 	}
 
 	/* LLVM 9.0 is required for GFX10. */
-	if (ws->info.chip_class == GFX10 && ws->use_llvm && LLVM_VERSION_MAJOR < 9) {
+	if (ws->info.chip_class == GFX10 && ws->use_llvm) {
 		fprintf(stderr, "radv: Navi family support requires LLVM 9 or higher\n");
 		return false;
 	}
diff --git a/src/amd/vulkan/winsys/null/radv_null_winsys.c b/src/amd/vulkan/winsys/null/radv_null_winsys.c
index b141564..c79c6ab 100644
--- a/src/amd/vulkan/winsys/null/radv_null_winsys.c
+++ b/src/amd/vulkan/winsys/null/radv_null_winsys.c
@@ -29,8 +29,6 @@
 #include "radv_null_bo.h"
 #include "radv_null_cs.h"
 
-#include "ac_llvm_util.h"
-
 /* Hardcode some GPU info that are needed for the driver or for some tools. */
 static const struct {
 	uint32_t pci_id;
@@ -68,6 +66,76 @@ static const struct {
 	[CHIP_NAVY_FLOUNDER] = { 0xffff, 8 },
 };
 
+
+const char *ac_get_llvm_processor_name(enum radeon_family family);
+
+const char *ac_get_llvm_processor_name(enum radeon_family family)
+{
+   switch (family) {
+   case CHIP_TAHITI:
+      return "tahiti";
+   case CHIP_PITCAIRN:
+      return "pitcairn";
+   case CHIP_VERDE:
+      return "verde";
+   case CHIP_OLAND:
+      return "oland";
+   case CHIP_HAINAN:
+      return "hainan";
+   case CHIP_BONAIRE:
+      return "bonaire";
+   case CHIP_KABINI:
+      return "kabini";
+   case CHIP_KAVERI:
+      return "kaveri";
+   case CHIP_HAWAII:
+      return "hawaii";
+   case CHIP_TONGA:
+      return "tonga";
+   case CHIP_ICELAND:
+      return "iceland";
+   case CHIP_CARRIZO:
+      return "carrizo";
+   case CHIP_FIJI:
+      return "fiji";
+   case CHIP_STONEY:
+      return "stoney";
+   case CHIP_POLARIS10:
+      return "polaris10";
+   case CHIP_POLARIS11:
+   case CHIP_POLARIS12:
+   case CHIP_VEGAM:
+      return "polaris11";
+   case CHIP_VEGA10:
+      return "gfx900";
+   case CHIP_RAVEN:
+      return "gfx902";
+   case CHIP_VEGA12:
+      return "gfx904";
+   case CHIP_VEGA20:
+      return "gfx906";
+   case CHIP_RAVEN2:
+   case CHIP_RENOIR:
+      return "gfx909";
+   case CHIP_ARCTURUS:
+      return "gfx908";
+   case CHIP_NAVI10:
+      return "gfx1010";
+   case CHIP_NAVI12:
+      return "gfx1011";
+   case CHIP_NAVI14:
+      return "gfx1012";
+   case CHIP_SIENNA_CICHLID:
+   case CHIP_NAVY_FLOUNDER:
+   case CHIP_DIMGREY_CAVEFISH:
+   case CHIP_VANGOGH:
+      return "gfx1030";
+   default:
+      return "";
+   }
+}
+
+
 static void radv_null_winsys_query_info(struct radeon_winsys *rws,
 					struct radeon_info *info)
 {
@@ -77,6 +145,7 @@ static void radv_null_winsys_query_info(struct radeon_winsys *rws,
 	info->chip_class = CLASS_UNKNOWN;
 	info->family = CHIP_UNKNOWN;
 
+  
 	for (i = CHIP_TAHITI; i < CHIP_LAST; i++) {
 		if (!strcmp(family, ac_get_llvm_processor_name(i))) {
 			/* Override family and chip_class. */
@@ -102,6 +171,7 @@ static void radv_null_winsys_query_info(struct radeon_winsys *rws,
 		fprintf(stderr, "radv: Unknown family: %s\n", family);
 		abort();
 	}
+  
 
 	info->pci_id = gpu_info[info->family].pci_id;
 	info->has_syncobj_wait_for_submit = true;
