--- 0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ 0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -43,9 +43,9 @@ index 0e85d1a082..98470eca3c 100644
  {
      REQ_new_process,
 @@ -5950,6 +5966,7 @@ enum request
+     REQ_set_job_limits,
+     REQ_set_job_completion_port,
      REQ_terminate_job,
-     REQ_suspend_process,
-     REQ_resume_process,
 +    REQ_create_esync,
      REQ_NB_REQUESTS
  };
@@ -243,9 +243,9 @@ index 4610ca6868..242143d2c3 100644
 --- a/server/request.h
 +++ b/server/request.h
 @@ -403,6 +403,7 @@ DECL_HANDLER(process_in_job);
+ DECL_HANDLER(set_job_limits);
+ DECL_HANDLER(set_job_completion_port);
  DECL_HANDLER(terminate_job);
- DECL_HANDLER(suspend_process);
- DECL_HANDLER(resume_process);
 +DECL_HANDLER(create_esync);
  
  #ifdef WANT_REQUEST_HANDLERS
@@ -296,9 +296,9 @@ index 9a84067662..d29c16b495 100644
      (dump_func)dump_new_process_request,
      (dump_func)dump_exec_process_request,
 @@ -4833,6 +4846,7 @@ static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
+     (dump_func)dump_set_job_limits_request,
+     (dump_func)dump_set_job_completion_port_request,
      (dump_func)dump_terminate_job_request,
-     (dump_func)dump_suspend_process_request,
-     (dump_func)dump_resume_process_request,
 +    (dump_func)dump_create_esync_request,
  };
  
--- 0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ 0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -51,9 +51,9 @@ index 0e85d1a082..98470eca3c 100644
  };
  
 @@ -6248,6 +6265,7 @@ union generic_request
+     struct set_job_limits_request set_job_limits_request;
+     struct set_job_completion_port_request set_job_completion_port_request;
      struct terminate_job_request terminate_job_request;
-     struct suspend_process_request suspend_process_request;
-     struct resume_process_request resume_process_request;
 +    struct create_esync_request create_esync_request;
  };
  union generic_reply
@@ -251,9 +251,9 @@ index 4610ca6868..242143d2c3 100644
  #ifdef WANT_REQUEST_HANDLERS
  
 @@ -700,6 +701,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
+     (req_handler)req_set_job_limits,
+     (req_handler)req_set_job_completion_port,
      (req_handler)req_terminate_job,
-     (req_handler)req_suspend_process,
-     (req_handler)req_resume_process,
 +    (req_handler)req_create_esync,
  };
  
@@ -312,9 +312,9 @@ index 9a84067662..d29c16b495 100644
  
  static const char * const req_names[REQ_NB_REQUESTS] = {
 @@ -5421,6 +5436,7 @@ static const char * const req_names[REQ_NB_REQUESTS] = {
+     "set_job_limits",
+     "set_job_completion_port",
      "terminate_job",
-     "suspend_process",
-     "resume_process",
 +    "create_esync",
  };
  
--- 0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ 0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -59,9 +59,9 @@ index 0e85d1a082..98470eca3c 100644
  union generic_reply
  {
 @@ -6544,6 +6562,7 @@ union generic_reply
+     struct set_job_limits_reply set_job_limits_reply;
+     struct set_job_completion_port_reply set_job_completion_port_reply;
      struct terminate_job_reply terminate_job_reply;
-     struct suspend_process_reply suspend_process_reply;
-     struct resume_process_reply resume_process_reply;
 +    struct create_esync_reply create_esync_reply;
  };
  
@@ -259,9 +259,9 @@ index 4610ca6868..242143d2c3 100644
  
  C_ASSERT( sizeof(affinity_t) == 8 );
 @@ -2406,6 +2408,12 @@ C_ASSERT( sizeof(struct set_job_completion_port_request) == 32 );
- C_ASSERT( sizeof(struct suspend_process_request) == 16 );
- C_ASSERT( FIELD_OFFSET(struct resume_process_request, handle) == 12 );
- C_ASSERT( sizeof(struct resume_process_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct terminate_job_request, handle) == 12 );
+ C_ASSERT( FIELD_OFFSET(struct terminate_job_request, status) == 16 );
+ C_ASSERT( sizeof(struct terminate_job_request) == 24 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, access) == 12 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, initval) == 16 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, flags) == 20 );
